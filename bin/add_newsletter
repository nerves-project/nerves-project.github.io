#! /usr/bin/env elixir

usage = """
This script is used to fetch the contents of a newsletter and create the resources
required to archive it on the website.

It requires the URL to the newsletter source HTML, which can typically be found
in the email at the top where it says "No images? Click here"

You can optionally include the issue number. Otherwise it is inferred as the next
incrementing number

./bin/add_newsletter [URL] [ISSUE_NUMBER]
"""

## Dependencies
Mix.install([
  {:req, "~> 0.3"},
  {:floki, "~> 0.34"}
])

[url | rem] = System.argv()

if "--help" in System.argv() do
  IO.puts(usage)
  System.halt(0)
end

unless String.starts_with?(url, "http") do
  IO.puts [IO.ANSI.red(), "Must include a valid URL to the newsletter", IO.ANSI.default_color()]
  System.halt(1)
end

root = File.cwd!

unless Path.basename(root) == "nerves-project.github.io" do
  IO.puts [IO.ANSI.red(), "add_newsletter must be run from the repo root (i.e. ./bin/add_newsletter)", IO.ANSI.default_color()]
  System.halt(1)
end

content = Path.join(root, "content/newsletter")

next =
  with [issue_str | _] <- rem,
  {issue, ""} <- Integer.parse(issue_str) do
    issue
  else
    _ ->
      IO.puts "|- Determining next issue"
      issues =
        for path <- Path.wildcard([content, "/2*"]),
            str = File.read!(path),
            [num_str] = Regex.run(~r/aliases:\n  - (\d+)/, str, capture: :all_but_first),
            do: String.to_integer(num_str)

      Enum.max(issues) + 1
  end
IO.puts("|- Adding issue #{to_string(next)}")

IO.puts("|- Fetching HTML")
%{body: body} = Req.get!(url)

[title] = Floki.parse_document!(body) |> Floki.attribute("meta[property='og:title']", "content")

date = Date.utc_today() |> Calendar.strftime("%Y-%m-%d")

html_name = Path.join(content, [date, "-", String.replace(title, " ", "-") |> String.downcase(), ".html"])
data = """
---
title: #{title}
date: #{date}
aliases:
  - #{next}
---
"""

IO.puts(["|- Writing ", Path.relative_to(html_name, root)])
File.write!(html_name, [data, "\n", body])

IO.puts([IO.ANSI.green(), "|- Done!", IO.ANSI.default_color()])
